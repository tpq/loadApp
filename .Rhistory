formals(S) <- alist(input =, output =, session =)
moduleServer(
tag,
S
)
}
# Define server logic required to draw a histogram
server_a <- function(input, output, session) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
ui <- tagUI("example-1/ui.R", tag = "ex1")
)
server <- function(input, output) {
tagServer("example-1/server.R", tag = "ex1")
# server_src <- source(server_file)
# S <- server_src$value
# moduleServer(
#   "ex1",
#   S
# )
# moduleServer(
#   "ex1",
#   server_a
# )
}
shinyApp(ui, server)
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
setwd("/home/thom/Downloads/app-menu/")
loadUI <- function(ui_file, tag){
ui_src <- source(ui_file)
U <- ui_src$value
html <- htmltools::renderTags(U)
html$html <- gsub("id=\"", paste0("id=\"", tag, "-"), html$html)
return(html)
}
loadServer <- function(server_file, tag){
server_src <- source(server_file)
S <- server_src$value
formals(S) <- alist(input =, output =, session =)
moduleServer(
tag,
S
)
}
# Define server logic required to draw a histogram
server_a <- function(input, output, session) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
loadUI("example-1/ui.R", tag = "ex1")
)
server <- function(input, output) {
loadServer("example-1/server.R", tag = "ex1")
# moduleServer(
#   "ex1",
#   server_a
# )
}
shinyApp(ui, server)
setwd("/home/thom/Dropbox/Projects/shiny-app-menu/")
library(shiny)
setwd("/home/thom/Dropbox/Projects/shiny-app-menu/")
library(shiny)
source("src/loadApp.R")
# # Define server logic required to draw a histogram
# server_a <- function(input, output, session) {
#
#   output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
#   })
# }
# Define UI for application that draws a histogram
ui <- fluidPage(
loadUI("example-1/ui.R", tag = "ex1")
)
server <- function(input, output) {
loadServer("example-1/server.R", tag = "ex1")
# moduleServer(
#   "ex1",
#   server_a
# )
}
shinyApp(ui, server)
a <- source("shiny-examples-main/001-hello/app.R")
a
str(a)
a$value
setwd("/home/thom/Dropbox/Projects/shiny-app-menu/")
library(shiny)
source("src/loadApp.R")
# # Define server logic required to draw a histogram
# server_a <- function(input, output, session) {
#
#   output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
#   })
# }
# Define UI for application that draws a histogram
ui <- fluidPage(
loadUI("example-1/ui.R", tag = "ex1")
)
server <- function(input, output) {
loadServer("example-1/server.R", tag = "ex1")
# moduleServer(
#   "ex1",
#   server_a
# )
}
shinyApp(ui, server)
make_unique_UI <- function(ui, tag){
html <- htmltools::renderTags(ui)
html$html <- gsub("id=\"", paste0("id=\"", tag, "-"), html$html)
return(html)
}
loadUI <- function(ui_file, tag){
ui_src <- source(ui_file)
ui <- ui_src$value
make_unique_UI(ui, tag = tag)
}
loadServer <- function(server_file, tag){
server_src <- source(server_file)
S <- server_src$value
formals(S) <- alist(input =, output =, session =)
moduleServer(tag, S)
}
loadApp <- function(app_file, tag, load_what = c("ui", "server")){
load_what <- load_what[1]
if(load_what == "ui"){
source(ui_file)
return(ui)
}else if(load_what == "server"){
source(ui_file)
formals(server) <- alist(input =, output =, session =)
}
}
setwd("/home/thom/Dropbox/Projects/shiny-app-menu/")
library(shiny)
source("src/loadApp.R")
# # Define server logic required to draw a histogram
# server_a <- function(input, output, session) {
#
#   output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
#   })
# }
# Define UI for application that draws a histogram
ui <- fluidPage(
loadUI("example-1/ui.R", tag = "ex1")
)
server <- function(input, output) {
loadServer("example-1/server.R", tag = "ex1")
# moduleServer(
#   "ex1",
#   server_a
# )
}
shinyApp(ui, server)
makeUI <- function(ui, tag){
html <- htmltools::renderTags(ui)
html$html <- gsub("id=\"", paste0("id=\"", tag, "-"), html$html)
return(html)
}
loadUI <- function(ui_file, tag){
ui_src <- source(ui_file)
ui <- ui_src$value
makeUI(ui, tag = tag)
}
makeServer <- function(server, tag){
formals(server) <- alist(input =, output =, session =)
moduleServer(tag, server)
}
loadServer <- function(server_file, tag){
server_src <- source(server_file)
server <- server_src$value
makeServer(server)
}
loadApp <- function(app_file, tag, load_what = c("ui", "server")){
load_what <- load_what[1]
if(load_what == "ui"){
source(ui_file)
return(ui)
}else if(load_what == "server"){
source(ui_file)
formals(server) <- alist(input =, output =, session =)
}
}
setwd("/home/thom/Dropbox/Projects/shiny-app-menu/")
library(shiny)
source("src/loadApp.R")
# # Define server logic required to draw a histogram
# server_a <- function(input, output, session) {
#
#   output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
#   })
# }
# Define UI for application that draws a histogram
ui <- fluidPage(
loadUI("example-1/ui.R", tag = "ex1")
)
server <- function(input, output) {
loadServer("example-1/server.R", tag = "ex1")
# moduleServer(
#   "ex1",
#   server_a
# )
}
shinyApp(ui, server)
setwd("/home/thom/Dropbox/Projects/shiny-app-menu/")
library(shiny)
source("src/loadApp.R")
# # Define server logic required to draw a histogram
# server_a <- function(input, output, session) {
#
#   output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
#   })
# }
# Define UI for application that draws a histogram
ui <- fluidPage(
loadUI("example-1/ui.R", tag = "ex1")
)
server <- function(input, output) {
loadServer("example-1/server.R", tag = "ex1")
# moduleServer(
#   "ex1",
#   server_a
# )
}
shinyApp(ui, server)
loadApp <- function(app_file, tag, load_what = c("ui", "server")){
source(ui_file)
load_what <- load_what[1]
if(load_what == "ui"){
makeUI(ui)
}else if(load_what == "server"){
makeServer(server)
}
}
loadApp("shiny-examples-main/001-hello/app.R", tag = "1", load_what = "ui")
loadApp <- function(app_file, tag, load_what = c("ui", "server")){
source(app_file)
load_what <- load_what[1]
if(load_what == "ui"){
makeUI(ui)
}else if(load_what == "server"){
makeServer(server)
}
}
loadApp("shiny-examples-main/001-hello/app.R", tag = "1", load_what = "ui")
loadApp <- function(app_file, tag, load_what = c("ui", "server")){
source(app_file)
load_what <- load_what[1]
if(load_what == "ui"){
makeUI(ui, tag = tag)
}else if(load_what == "server"){
makeServer(server, tag = tag)
}
}
loadApp("shiny-examples-main/001-hello/app.R", tag = "1", load_what = "ui")
# Define UI for application that draws a histogram
ui <- fluidPage(
loadApp("shiny-examples-main/001-hello/", tag = "ex1", load_what = "ui")
)
setwd("/home/thom/Dropbox/Projects/shiny-app-menu/")
library(shiny)
source("src/loadApp.R")
# Define UI for application that draws a histogram
ui <- fluidPage(
loadApp("shiny-examples-main/001-hello/", tag = "ex1", load_what = "ui")
)
server <- function(input, output) {
loadApp("shiny-examples-main/001-hello/app.R", tag = "ex1", load_what = "server")
}
shinyApp(ui, server)
setwd("/home/thom/Dropbox/Projects/shiny-app-menu/")
library(shiny)
source("src/loadApp.R")
# Define UI for application that draws a histogram
ui <- fluidPage(
loadApp("shiny-examples-main/001-hello/app.R", tag = "ex1", load_what = "ui")
)
server <- function(input, output) {
loadApp("shiny-examples-main/001-hello/app.R", tag = "ex1", load_what = "server")
}
shinyApp(ui, server)
runApp('wizard-demo.R')
runApp('test.R')
?observeEvent
?tabPanel
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
ui <- fluidPage(
tabsetPanel(
id = "wizard",
type = "hidden",
tabPanel("home",
"Welcome!",
actionButton("loadapp1", "App 1"),
actionButton("loadapp2", "App 2")
),
tabPanel("app1",
loadUI("example-1/ui.R", tag = "ex1"),
actionButton("home", "Home")
),
tabPanel("app2",
loadApp("shiny-examples-main/002-text/app.R", tag = "ex2", load_what = "ui"),
actionButton("home", "Home")
)
)
)
server <- function(input, output, session){
switch_page <- function(page){
updateTabsetPanel(inputId = "wizard", selected = page)
}
observeEvent(input$home, {
session$reload()
switch_page("home")
})
observeEvent(input$loadapp1, {
switch_page("app1")
loadServer("example-1/server.R", tag = "ex1")
})
observeEvent(input$loadapp2, {
switch_page("app2")
loadApp("shiny-examples-main/002-text/app.R", tag = "ex2", load_what = "server")
})
}
shinyApp(ui, server)
ui
runApp('test.R')
runApp('test.R')
?conditionalPanel
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
ui <- fluidPage(
tabsetPanel(
id = "wizard",
type = "hidden",
tabPanel("home",
title("Welcome to the App Menu!"),
actionButton("loadapp1", "App 1"),
actionButton("loadapp2", "App 2")
),
tabPanel("app1",
loadUI("example-1/ui.R", tag = "ex1")
),
tabPanel("app2",
loadApp("shiny-examples-main/002-text/app.R", tag = "ex2", load_what = "ui")
)
),
actionButton("home", "Home")
)
server <- function(input, output, session){
switch_page <- function(page){
updateTabsetPanel(inputId = "wizard", selected = page)
}
observeEvent(input$home, {
session$reload()
switch_page("home")
})
observeEvent(input$loadapp1, {
switch_page("app1")
loadServer("example-1/server.R", tag = "ex1")
})
observeEvent(input$loadapp2, {
switch_page("app2")
loadApp("shiny-examples-main/002-text/app.R", tag = "ex2", load_what = "server")
})
}
shinyApp(ui, server)
?title
ui
loadUI("example-1/ui.R", tag = "ex1")
runApp('test.R')
?actionButton
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('loadApp-demo-3.R')
library(shiny); runApp('loadApp-demo-3.R')
library(shiny)
source("src/loadApp.R")
library(shiny)
source("src/loadApp.R")
ui <- fluidPage(
tabsetPanel(
id = "wizard",
type = "hidden",
tabPanel("home",
h2("Welcome to the App Menu!"),
actionButton("loadapp1", "App 1"),
actionButton("loadapp2", "App 2")
),
tabPanel("app1",
loadApp("shiny-examples-main/001-hello/app.R", tag = "ex1", load_what = "ui")
),
tabPanel("app2",
loadApp("shiny-examples-main/002-text/app.R", tag = "ex2", load_what = "ui")
)
),
h2(""),
actionButton("home", "Home")
)
server <- function(input, output, session){
switch_page <- function(page){
updateTabsetPanel(inputId = "wizard", selected = page)
}
observeEvent(input$home, {
session$reload()
switch_page("home")
})
observeEvent(input$loadapp1, {
switch_page("app1")
loadApp("shiny-examples-main/001-hello/app.R", tag = "ex1", load_what = "server")
})
observeEvent(input$loadapp2, {
switch_page("app2")
loadApp("shiny-examples-main/002-text/app.R", tag = "ex2", load_what = "server")
})
}
shinyApp(ui, server)
library(shiny)
source("src/loadApp.R")
ui <- fluidPage(
loadApp("shiny-examples-main/001-hello/app.R", tag = "ex1", load_what = "ui")
)
server <- function(input, output) {
loadApp("shiny-examples-main/001-hello/app.R", tag = "ex1", load_what = "server")
}
shinyApp(ui, server)
library(shiny)
source("src/loadApp.R")
# # Define server logic required to draw a histogram
# server_a <- function(input, output, session) {
#
#   output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
#   })
# }
# Define UI for application that draws a histogram
ui <- fluidPage(
loadUI("example-1/ui.R", tag = "ex1")
)
server <- function(input, output) {
loadServer("example-1/server.R", tag = "ex1")
# moduleServer(
#   "ex1",
#   server_a
# )
}
shinyApp(ui, server)
